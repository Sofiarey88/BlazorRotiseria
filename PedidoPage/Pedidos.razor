@page "/pedidos"
@using RoticeriaBlazor.Modelos
@using RoticeriaBlazor.Services
@inject IPedidosService PedidoService
@inject IClienteService ClientesService
@inject IProductoService ProductosService

<PageTitle>Pedidos</PageTitle>

<ComponenteTitulo Titulo="Pedidos"/>

<p>Lista de pedidos realizados en el sitio web.</p>

@if (pedidos == null)
{
    <p><em>Cargando...</em></p>
}
else if (!pedidos.Any())
{
    <p><em>No hay pedidos disponibles.</em></p>
}
else
{
    <NavLink class="nav-link btn btn-primary mb-2" href="nuevopedido">
        Nuevo Pedido
    </NavLink>
    <table class="table">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Estado</th>
                <th>Cliente</th>
                <th>Producto</th> <!-- Nueva columna para el producto -->
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pedido in pedidos)
            {
                <tr>
                    <td>@pedido.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>@pedido.Estado</td>
                    <td>@clienteNombres[pedido.ClienteId]</td> <!-- Mostrar el nombre del cliente -->
                    <td>@productoNombres[pedido.ProductoId]</td> <!-- Mostrar el nombre del producto -->
                    <td>
                        <NavLink class="nav-link" href=@($"editarpedido?idPedido={pedido.Id}")>
                            Editar
                        </NavLink>
                        <button title="Eliminar" class="btn btn-danger" @onclick="@(() => ConfirmarEliminar(pedido))">
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (pedidoAEliminar != null)
{
    <div class="alert alert-warning mt-3">
        <strong>Advertencia:</strong> ¿Está seguro que desea eliminar el pedido?
        <div class="mt-2">
            <button class="btn btn-danger" @onclick="EliminarPedido">Sí, Eliminar</button>
            <button class="btn btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
        </div>
    </div>
}

@code {
    private List<Pedido>? pedidos;
    private Pedido? pedidoAEliminar;
    private Dictionary<int, string> clienteNombres = new(); // Almacena nombres de clientes con su ID
    private Dictionary<int, string> productoNombres = new(); // Almacena nombres de productos con su ID

    protected override async Task OnInitializedAsync()
    {
        await CargarPedidos();
        await CargarClientes();
        await CargarProductos(); // Cargar productos también
    }

    private async Task CargarPedidos()
    {
        try
        {
            pedidos = await PedidoService.Get();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching pedidos: {ex.Message}");
            pedidos = new List<Pedido>();
        }
    }

    private async Task CargarClientes()
    {
        try
        {
            var clientes = await ClientesService.Get();
            clienteNombres = clientes.ToDictionary(c => c.Id, c => c.Nombre); // Asigna el nombre de cada cliente a su ID
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching clientes: {ex.Message}");
            clienteNombres = new Dictionary<int, string>();
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            var productos = await ProductosService.Get();
            productoNombres = productos.ToDictionary(p => p.Id, p => p.Nombre); // Asigna el nombre de cada producto a su ID
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching productos: {ex.Message}");
            productoNombres = new Dictionary<int, string>();
        }
    }

    private void ConfirmarEliminar(Pedido pedido)
    {
        pedidoAEliminar = pedido;
    }

    private async Task EliminarPedido()
    {
        if (pedidoAEliminar != null)
        {
            try
            {
                await PedidoService.Delete(pedidoAEliminar.Id);
                await CargarPedidos();
                pedidoAEliminar = null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar el pedido: {ex.Message}");
            }
        }
    }

    private void CancelarEliminar()
    {
        pedidoAEliminar = null;
    }
}