@page "/nuevopedido"
@using RoticeriaBlazor.Modelos
@using RoticeriaBlazor.Services
@inject IPedidosService PedidoService
@inject IClienteService ClienteService
@inject IProductoService ProductoService // Asegúrate de tener este servicio
@inject NavigationManager Navigation

<PageTitle>Nuevo Pedido</PageTitle>

<ComponenteTitulo Titulo="Nuevo Pedido"/>

<p>Complete los datos para crear un nuevo pedido.</p>

@if (clientes == null || productos == null)
{
    <p><em>Cargando datos...</em></p>
}
else
{
    <EditForm Model="pedido" OnValidSubmit="GuardarPedido">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="Fecha" class="form-label">Fecha</label>
            <InputDate id="Fecha" class="form-control" @bind-Value="pedido.Fecha" />
        </div>

        <div class="mb-3">
            <label for="Estado" class="form-label">Estado</label>
            <InputText id="Estado" class="form-control" @bind-Value="pedido.Estado" />
        </div>

        <div class="mb-3">
            <label for="ClienteId" class="form-label">Cliente</label>
            <InputSelect id="ClienteId" class="form-control" @bind-Value="pedido.ClienteId">
                <option value="">Seleccione un cliente</option>
                @foreach (var cliente in clientes)
                {
                    <option value="@cliente.Id">@cliente.Nombre</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="ProductoId" class="form-label">Producto</label>
            <InputSelect id="ProductoId" class="form-control" @bind-Value="pedido.ProductoId">
                <option value="">Seleccione un producto</option>
                @foreach (var producto in productos)
                {
                    <option value="@producto.Id">@producto.Nombre</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Guardar Pedido</button>
    </EditForm>

    <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
}

@code {
    private Pedido pedido = new Pedido
    {
        Fecha = DateTime.Now,
        Estado = "Pendiente"
    };
    private List<Cliente>? clientes;
    private List<Producto>? productos; // Añadir lista de productos

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clientes = await ClienteService.Get(); // Cargar la lista de clientes
            productos = await ProductoService.Get(); // Cargar la lista de productos
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task GuardarPedido()
    {
        if (pedido.ClienteId == 0)
        {
            Console.WriteLine("Debe seleccionar un cliente.");
            return;
        }
        
        if (pedido.ProductoId == 0)
        {
            Console.WriteLine("Debe seleccionar un producto.");
            return;
        }

        Console.WriteLine($"Fecha: {pedido.Fecha}, Estado: {pedido.Estado}, ClienteId: {pedido.ClienteId}, ProductoId: {pedido.ProductoId}");

        try
        {
            await PedidoService.Add(pedido); // Guardar el nuevo pedido
            Navigation.NavigateTo("/pedidos"); // Redirigir a la lista de pedidos
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creando pedido: {ex.Message}");
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/pedidos");
    }
}
